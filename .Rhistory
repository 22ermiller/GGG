filtered_scorecard <- scorecard %>% filter(Date >= "2019-01-01") %>% group_by(School, Date) %>% summarize(enrolled = sum(`End Enrollment`)) %>% filter(Date == "2019-01-01")
schools <- tibble(bus_name = unique(filtered_scorecard$School))
anti_join(school_codes, schools, by = "bus_name")
View(scorecard)
View(schools)
View(school_codes)
filtered_scorecard <- scorecard %>% filter(Date >= "2019-01-01") %>% group_by(School, Date) %>% summarize(enrolled = sum(`End Enrollment`)) %>% filter(Date == "2023-01-01")
schools <- tibble(bus_name = unique(filtered_scorecard$School))
anti_join(school_codes, schools, by = "bus_name")
library(gmailr)
library(tidyverse)
gm_auth("evan@staritasolutions.com", cache = FALSE)
gm_auth_configure(path = "~/Downloads/official_gmail_client_secret.json")
gm_auth("evan@staritasolutions.com", cache = FALSE)
gm_profile()
library(lubridate)
library(odbc)
library(tidyverse)
library(janitor)
my_connection <- dbConnect(drv = odbc::odbc(),
driver = "/opt/microsoft/msodbcsql18/lib64/libmsodbcsql-18.3.so.1.1",
server = "ss-solutions-server.database.windows.net",
database = "CorporateScorecardData",
uid = "staritasolutions",
pwd = "jje&2023FTW")
library(readr)
school_codes <- read_csv("Documents/Work/Executive Dashboard/CincinnatiExecDash/Data/school_codes.csv")
View(school_codes)
adhoc <- my_connection %>% tbl("AdHocExports") %>% filter(KissID == 5810) %>% collect()
adhoc1 <- adhoc %>%
group_by(`Kiss ID`, Acct) %>%
arrange(desc(ImportDate)) %>%
slice_head(n = 1) %>%
ungroup()
adhoc1 <- adhoc %>%
group_by(KissID) %>%
arrange(desc(ImportDate)) %>%
slice_head(n = 1) %>%
ungroup()
adhoc1 <- adhoc %>%
group_by(AccountNum) %>%
arrange(desc(ImportDate)) %>%
slice_head(n = 1) %>%
ungroup()
adhoc1 %>% filter(AttendStat == "Currently Attending")
View(adhoc1)
library(lubridate)
library(odbc)
library(tidyverse)
library(janitor)
# df <- read_csv("~/Downloads/ProgramAttendance.csv")
school_codes <- read_csv("~/Documents/Work/Executive Dashboard/test/Data/school_codes.csv")
my_connection <- dbConnect(drv = odbc::odbc(),
driver = "/opt/microsoft/msodbcsql18/lib64/libmsodbcsql-18.3.so.1.1",
server = "ss-solutions-server.database.windows.net",
database = "CorporateScorecardData",
uid = "staritasolutions",
pwd = "jje&2023FTW")
my_connection <- dbConnect(drv = odbc::odbc(),
driver = "/opt/microsoft/msodbcsql18/lib64/libmsodbcsql-18.3.so.1.1",
server = "ss-solutions-server.database.windows.net",
database = "CorporateScorecardData",
uid = "staritasolutions",
pwd = "jje&2023FTW")
# Pull From Database ------------------------------------------------------
attendance_df_raw <- my_connection %>% tbl("ScorecardAttendance") %>% collect()
attendance_df <- attendance_df_raw %>%
mutate(BeginningDate = mdy(BeginningDate),
EndDate = mdy(EndDate)) %>%
rename(Beginning_Date = BeginningDate,
End_Date = EndDate,
Kiss_ID = KissID,
Actual_Hours = ActualHours,
Scheduled_Hours = ScheduledHours) %>%
select(-(id))
View(school_codes)
attendance_df %>% filter(Kiss_ID %in% c("5778")) %>% View()
View(school_codes)
attendance_df %>% filter(Kiss_ID %in% c("1065")) %>% View()
attendance_df %>% filter(Kiss_ID %in% c("5778")) %>% View()
attendance_df %>% filter(Kiss_ID %in% c("5751")) %>% View()
library(tidyverse)
crm <- read_csv("Downloads/northstar_crm(2).csv")
View(crm)
?str_detect
crm %>% filter(str_detect(`URL Source`, "GFF"))
crm %>% filter(str_detect(`URL Source`, "gff"))
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
filter(str_detect(`URL Source`, "gff"))
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Boise") %>%
filter(str_detect(`URL Source`, "gff"))
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Boise") %>%
filter(str_detect(`URL Source`, "gff")) %>%
View()
?str_detect
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Boise") %>%
filter(str_detect(`URL Source`, "gff")) %>%
View()
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
mutate(lead_num = n()) %>%
View()
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
summarize(lead_num = n()) %>%
View()
crm %>%
#filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
summarize(lead_num = n()) %>%
View()
crm %>%
# filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
# filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
summarize(lead_num = n()) %>%
View()
unique(crm$`School Name`)
library(tidyverse)
crm <- read_csv("Downloads/northstar_crm(3).csv")
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
summarize(lead_num = n()) %>%
View()
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Provo") %>%
filter(str_detect(`URL Source`, "gff")) %>%
)
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "P") %>%
filter(str_detect(`URL Source`, "gff"))
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Provo") %>%
filter(str_detect(`URL Source`, "gff"))
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Provo") %>%
filter(str_detect(`URL Source`, "gff")) %>% View()
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01" & `School Name` == "Provo") %>%
filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
summarize(lead_num = n()) %>%
View()
crm %>%
filter(Lead >= "2023-08-01" & Lead < "2023-09-01") %>%
filter(str_detect(`URL Source`, "gff")) %>%
group_by(`School Name`) %>%
summarize(lead_num = n()) %>%
View()
3250000000/3300000
32500000/3300000
45000000/5600000
11.11+9.85+8.04
29/3
20000000/1800000
library(tidymodels)
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages("tidymodels")
install.packages(c("askpass", "attachment", "AzureGraph", "broom", "bs4Dash", "bslib", "charlatan", "chromote", "config", "cpp11", "credentials", "curl", "dbplyr", "deSolve", "downlit", "dplyr", "DT", "evaluate", "fields", "fontawesome", "gert", "ggplot2", "ggpp", "glmnet", "golem", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "httr2", "knitr", "ks", "labeling", "lme4", "locfit", "markdown", "MatrixModels", "matrixStats", "minqa", "mvtnorm", "odbc", "openssl", "packrat", "pak", "patchwork", "pkgbuild", "pkgload", "plotly", "pROC", "processx", "profvis", "promises", "purrr", "quantreg", "readxl", "rematch", "rmarkdown", "rsconnect", "rstan", "rstudioapi", "shiny", "shinyWidgets", "snakecase", "StanHeaders", "sys", "testthat", "thematic", "tidybayes", "tinytex", "tzdb", "usethis", "uuid", "V8", "vctrs", "viridis", "viridisLite", "waldo", "webshot2", "xfun", "xml2"))
install.packages(c("askpass", "attachment", "AzureGraph", "broom", "bs4Dash", "bslib", "charlatan", "chromote", "config", "cpp11", "credentials", "curl", "dbplyr", "deSolve", "downlit", "dplyr", "DT", "evaluate", "fields", "fontawesome", "gert", "ggplot2", "ggpp", "glmnet", "golem", "googledrive", "googlesheets4", "gtable", "haven", "htmltools", "httr", "httr2", "knitr", "ks", "labeling", "lme4", "locfit", "markdown", "MatrixModels", "matrixStats", "minqa", "mvtnorm", "odbc", "openssl", "packrat", "pak", "patchwork", "pkgbuild", "pkgload", "plotly", "pROC", "processx", "profvis", "promises", "purrr", "quantreg", "readxl", "rematch", "rmarkdown", "rsconnect", "rstan", "rstudioapi", "shiny", "shinyWidgets", "snakecase", "StanHeaders", "sys", "testthat", "thematic", "tidybayes", "tinytex", "tzdb", "usethis", "uuid", "V8", "vctrs", "viridis", "viridisLite", "waldo", "webshot2", "xfun", "xml2"))
install.packages("tidymodels")
dbimon(1,5,.2)
dbinom(1,5,.2)
?choose
choose(5,1)
dbinom(0,5,.2)
dbinom(2,5,.2)
dbinom(3,5,.2)
dbinom(4,5,.2)
dbinom(5,5,.2)
dogs <- function(x,y, prob_a) {
value <- ((y^x)/(factorial(x)*(1+y+(y^2/2)+(y^3/6)+(y^4/24))))*(prob_a)
}
dogs(0,.5,1/10)
a <- dogs(0,.5,1/10)
dogs(0,.5,1/10)
a <- dogs(0,.5,1/10)
a <- dogs(1,.5,1/10)
a <- dogs(2,.5,1/10)
a <- dogs(3,.5,1/10)
a <- dogs(4,.5,1/10)
a <- dogs(2,2,7/10)
a <- dogs(1,2,7/10)
a <- dogs(3,2,7/10)
a <- dogs(4,2,7/10)
a <- dogs(0,1,2/10)
a <- dogs(1,1,2/10)
a <- dogs(2,1,2/10)
a <- dogs(3,1,2/10)
a <- dogs(4,1,2/10)
dogs <- function(x,y) {
value <- ((y^x)/(factorial(x)*(1+y+(y^2/2)+(y^3/6)+(y^4/24))))
print(value)
}
a <- dogs(c(0,1,2,3,4),.5)
a %*% c(0,1,2,3,4)
a
shiny::runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
shiny::runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
knitr::opts_chunk$set(echo = TRUE)
#uncomment any of these that you will want to use (and add any others)
#library(tinytex)
#library(tidyverse)
#Include your code for answer 2b here.  If no code is required, delete this chunk (remove everything between and including the ```)
(.1*.2)+(.3*.2)+(.6*.2)+(.8*.2)+(.95*.2)
#Include your code for answer 2b here.  If no code is required, delete this chunk (remove everything between and including the ```)
theta <- c(.1, .3, .6, .8, .95)
sum(dbinom(21, 68, theta)*.2)
total <- sum(dbinom(21, 68, theta)*.2)
post <- dbinom(21, 68, theta)*.2/total
sum(post)
post
posterior <- as.tibble(theta, post)
posterior <- tibble(theta, post)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
#uncomment any of these that you will want to use (and add any others)
#library(tinytex)
#library(tidyverse)
posterior <- as_tibble(theta, post)
posterior <- data.frame(theta, post)
View(posterior)
sum(posterior$post)
ggplot() +
geom_line(aes(x = theta, y = .2)) +
geom_line(aes(x = theta, y = post))
ggplot() +
geom_line(aes(x = theta, y = .2)) +
geom_line(aes(x = theta, y = post, color = "blue"))
ggplot() +
geom_line(aes(x = theta, y = .2)) +
geom_line(aes(x = theta, y = post), color = "blue")
ggplot() +
geom_line(aes(x = theta, y = .2)) +
geom_line(aes(x = theta, y = post), color = "blue")
.41 = a/(a+b)
.41 <- a/(a+b)
1-.41
.59/.41
5*1.439024
1/(1+1.439024)
5/(5+7.19512)
x <- seq(0,1, by = .001)
beta1 <- dbeta(x, 1, 1.439024)
beta2 <- dbeta(x, 5, 7.19512)
ggplot(aes(x = x)) +
geom_line(aes(y = beta1))+
geom_line(aes(y = beta2), color = "blue")
df <- data.frame(x, beta1, beta2)
x <- seq(0,1, by = .001)
beta1 <- dbeta(x, 1, 1.439024)
beta2 <- dbeta(x, 5, 7.19512)
df <- data.frame(x, beta1, beta2)
ggplot(df, aes(x = x)) +
geom_line(aes(y = beta1))+
geom_line(aes(y = beta2), color = "blue")
x <- seq(0,1, by = .001)
beta1 <- dbeta(x, 1, 1.439024)
beta2 <- dbeta(x, 5, 7.19512)
df <- data.frame(x, beta1, beta2)
ggplot(df, aes(x = x)) +
geom_line(aes(y = beta1))+
geom_line(aes(y = beta2), color = "blue") +
labs(y = "Prob")
a1 <- 1
b1 <- 1.439024
a2 <- 5
b2 <- 7.19512
var1 <- (a1*b1)/((a1+b1+1)*(a1+b1)^2)
a1 <- 1
b1 <- 1.439024
a2 <- 5
b2 <- 7.19512
var1 <- (a1*b1)/((a1+b1+1)*(a1+b1)^2)
var2 <- (a2*b2)/((a2+b2+1)*(a2+b2)^2)
1-dbeta(.1,2,7)
dbeta(.1,2,7)
pbeta(.1,2,7)
2/9
pbeta(.2222,2,7)
pbeta(.2221,2,7)
pbeta(.2223,2,7)
dbeta(.5, 2,7)
qbeta(.5,2,7)
dbeta(.1,2,7)
1beta(1,2,7)
qbeta(1,2,7)
qbeta(.5,2,7)
2/9
1-pbeta(.1,2,7)
qbeta(.4, 2, 7)
pbeta(1.681643, 2,7)
pbeta(.1681643, 2,7)
mean <- 17/(17+102)
var <- (17*102)/((17+102+1)*(17+102)^2)
lower <- qbeta(.025, 17, 102)
upper <- qbeta(.975, 17, 102)
lower <- qbeta(.025, 17, 102)
upper <- qbeta(.975, 17, 102)
interval <- paste0("(", lower, ", ", upper, ")")
interval
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(DT)
#uncomment any of these that you will want to use (and add any others)
#library(tinytex)
#library(tidyverse)
mean <- 18/(18+103)
var <- (18*103)/((18+103+1)*(18+103)^2)
lower <- qbeta(.025, 18, 103)
upper <- qbeta(.975, 18, 103)
interval <- paste0("(", lower, ", ", upper, ")")
library(tidyverse)
peanut_x <- 1
peaunut_n <- 14
regular_x <- 12
regular_n <- 30
a <- 1
b <- 5
shiny::runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
shiny::runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
shiny::runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
shiny::runApp('Documents/Tennis_Strategy_Shared/Evan/TennisServesApp')
setwd("~/Documents/Stat 348/GGG")
library(tidyverse)
library(tidymodels)
library(vroom)
library(themis)
library(embed)
test <- vroom("test.csv")
train <- vroom("train.csv")
na_df <- vroom("trainWithMissingValues.csv")
nn_recipe <- recipe(formula = type~., data = train) %>%
step_mutate_at(all_nominal_predictors(), fn = factor) %>%
step_dummy(all_nominal_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1) # scale to [0,1]
nn_model <- mlp(hidden_units = tune(),
epochs = 50,
activation="relu") %>%
set_engine("keras", verbose=0) %>% # verbose  = 0 prints less in console
set_mode("classification")
nn_wf <- workflow() %>%
add_recipe(nn_recipe) %>%
add_model(nn_model)
nn_tuneGrid <- grid_regular(hidden_units(range=c(1, 100)),
levels=5)
# split data into folds
folds <- vfold_cv(train, v = 10, repeats = 1)
# run Cross validation
CV_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = tuning_grid,
metrics = metric_set(roc_auc, accuracy))
# run Cross validation
CV_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = nn_tuneGrid,
metrics = metric_set(roc_auc, accuracy))
install.packages("keras")
install.packages("keras")
# run Cross validation
CV_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = nn_tuneGrid,
metrics = metric_set(roc_auc, accuracy))
install.packages("tensorflow.keras")
install.packages("tensorflow")
install.packages("tensorflow")
# run Cross validation
CV_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = nn_tuneGrid,
metrics = metric_set(roc_auc, accuracy))
nn_model <- mlp(hidden_units = tune(),
epochs = 50#,
#activation="relu"
) %>%
set_engine("nnet") %>%
#set_engine("keras", verbose = 0) %>% # verbose  = 0 prints less in console
set_mode("classification")
nn_wf <- workflow() %>%
add_recipe(nn_recipe) %>%
add_model(nn_model)
nn_tuneGrid <- grid_regular(hidden_units(range=c(1, 100)),
levels=5)
nn_recipe <- recipe(formula = type~., data = train) %>%
step_mutate_at(all_nominal_predictors(), fn = factor) %>%
step_dummy(all_nominal_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1) # scale to [0,1]
nn_model <- mlp(hidden_units = tune(),
epochs = 50#,
#activation="relu"
) %>%
set_engine("nnet") %>%
#set_engine("keras", verbose = 0) %>% # verbose  = 0 prints less in console
set_mode("classification")
nn_wf <- workflow() %>%
add_recipe(nn_recipe) %>%
add_model(nn_model)
nn_tuneGrid <- grid_regular(hidden_units(range=c(1, 100)),
levels=5)
# split data into folds
folds <- vfold_cv(train, v = 10, repeats = 1)
# run Cross validation
CV_results <- nn_wf %>%
tune_grid(resamples = folds,
grid = nn_tuneGrid,
metrics = metric_set(roc_auc, accuracy))
# find best parameters
bestTune <- CV_results %>%
select_best("accuracy")
CV_metrics %>% collect_metrics() %>%
filter(.metric == "accuracy") %>%
ggplot(aes())
CV_results %>% collect_metrics() %>%
filter(.metric == "accuracy") %>%
ggplot(aes())
final_nn_workflow <- nn_workflow %>%
finalize_workflow(bestTune) %>%
fit(data = train)
final_nn_workflow <- nn_wf %>%
finalize_workflow(bestTune) %>%
fit(data = train)
# predict
nn_preds <- predict(final_nn_workflow,
new_data = test,
type = "class")
final_nn_preds <- tibble(id = test$id,
type = nn_preds$.pred_class)
vroom_write(final_nn_preds, "nn_predictions.csv", delim = ",")
View(CV_results)
CV_results %>% collect_metrics()
CV_results %>% collect_metrics() %>%
filter(.metric == "accuracy") %>%
ggplot(aes(x=hidden_units, y=mean)) +
geom_line()
nn_recipe <- recipe(formula = type~., data = train) %>%
step_mutate_at(all_nominal_predictors(), fn = factor) %>%
step_dummy(all_nominal_predictors()) %>%
step_range(all_numeric_predictors(), min=0, max=1) # scale to [0,1]
nn_model <- mlp(hidden_units = tune(),
epochs = 50#,
#activation="relu"
) %>%
set_engine("nnet") %>%
#set_engine("keras", verbose = 0) %>% # verbose  = 0 prints less in console
set_mode("classification")
nn_wf <- workflow() %>%
add_recipe(nn_recipe) %>%
add_model(nn_model)
nn_tuneGrid <- grid_regular(hidden_units(range=c(1, 500)),
levels=5)
